stages:          # List of stages for jobs, and their order of execution
  - idc
  - template
  - cleanup
  - vm
  - ip

before_script:  # Tags and environment variables to set before any job runs
  - export GIT_TAG="${CI_COMMIT_TAG#v}"
  - export RB_VERSION="${GIT_TAG%.*}"
  - export RB_TAG="${GIT_TAG##*.}"

check-artifacts-job:       # This job runs in the build stage, which runs first.
  stage: idc
  tags:
    - vsphere-runner-ubuntu-242

  only:
    - /^v\d+\.\d+\.\d+.rb\d+$/   # Only run for tags like v1.0.0.rb0
  script:
    - echo "Checking artifacts if exists on IDC..."
    - |
      if ! curl -fsSLI "http://172.30.101.201:85/${RB_VERSION}/v${RB_VERSION}.${RB_TAG}/" >/dev/null; then
        echo "❌ IDC artifacts not found: ${RB_VERSION} ${RB_TAG}";
        exit 1
      fi
      echo "✅ IDC artifacts ${RB_VERSION} ${RB_TAG} exist";

build-vm-template-job:
  stage: template
  tags:
    - vsphere-runner-ubuntu-242

  only:
    - /^v\d+\.\d+\.\d+.rb\d+$/   # Only run for tags like v1.0.0.rb0
  needs:
    - check-artifacts-job
  script:
    - echo "Building VM template for version ${RB_VERSION} and RidgeBot tag ${RB_TAG}..."
    - echo "PWD ===== ${CI_PROJECT_DIR}"
    - cp "$PACKER_SECRET" "$CI_PROJECT_DIR/src/packer_template/secrets.pkrvars.hcl"
    - |
      chmod +x ./src/packer_template/setup.sh
      ./src/packer_template/setup.sh centos_iso.pkr.hcl "${RB_VERSION}" "${RB_TAG}"

cleanup-vm-job:
  stage: cleanup
  tags:
    - vsphere-runner-ubuntu-242

  only:
    - /^v\d+\.\d+\.\d+.rb\d+$/   # Only run for tags like v1.0.0.rb0
  script:
    - echo "Cleaning up VM for version ${RB_VERSION} and RidgeBot tag ${RB_TAG}..."
    - echo "PWD ===== ${CI_PROJECT_DIR}"
    - cp "$VSPHERE_240" "$CI_PROJECT_DIR/src/tf/vsphere_240.tfvars"
    - cp "$VSPHERE_242" "$CI_PROJECT_DIR/src/tf/vsphere_242.tfvars"
    - |
      cd src/tf && \
      make init-staging && \
      make destroy-staging RB_VERSION=${RB_VERSION} RB_TAG=${RB_TAG}

build-vm-job:
  stage: vm
  timeout: 3h
  tags:
    - vsphere-runner-ubuntu-242

  only:
    - /^v\d+\.\d+\.\d+.rb\d+$/   # Only run for tags like v1.0.0.rb0
  script:
    - echo "Building VM for version ${VERSION} and RidgeBot tag ${RB_TAG}..."
    - echo "PWD ===== ${CI_PROJECT_DIR}"
    - cp "$VSPHERE_240" "$CI_PROJECT_DIR/src/tf/vsphere_240.tfvars"
    - cp "$VSPHERE_242" "$CI_PROJECT_DIR/src/tf/vsphere_242.tfvars"
    - |
      cd src/tf && \
      make init-staging && \
      make plan-staging RB_VERSION=${RB_VERSION} RB_TAG=${RB_TAG} && \
      make apply-staging RB_VERSION=${RB_VERSION} RB_TAG=${RB_TAG}

trigger-playwright-ui-test-job:
  stage: ip
  tags:
    - vsphere-runner-ubuntu-242

  only:
    - /^v\d+\.\d+\.\d+.rb\d+$/   # Only run for tags like v1.0.0.rb0
  needs:
    - build-vm-job
  script:
    - echo "Trigger E2E test on Outputting VM IP for version ${RB_VERSION} and RidgeBot tag ${RB_TAG}..."
    - |
      cd src/tf && \
      make init-staging && \
      IPS=($(make -s output-ip-staging))

#     Create list of variable ips for provisioned vm e.g."variables[RIDGEBOT_IP1]=$IP1"
      VM_IPS=()
      for i in "${!IPS[@]}"; do
        idx=$((i+1))
        VM_IPS+=(-F "variables[RIDGEBOT_IP$idx]=${IPS[$i]}")
      done
    
      curl -X POST \
      -F token="${TRIGGER_TOKEN_E2E}" \
      -F ref='dev/will' \
      "${VM_IPS[@]}" \
      https://gitt.ridgesecurity.ai/api/v4/projects/62/trigger/pipeline
